var umadash;
(function (umadash) {
    var events;
    (function (events) {
        var EventDispatcher = (function () {
            function EventDispatcher() {
                this.listeners = {};
            }
            EventDispatcher.prototype.addEventListener = function (eventName, listener) {
                if (this.listeners[eventName] == null) {
                    this.listeners[eventName] = [];
                }
                this.listeners[eventName].push(listener);
            };
            EventDispatcher.prototype.removeEventListener = function (eventName, listener) {
                if (listener) {
                    var eventListeners = this.listeners[eventName];
                    for (var i = 0, length_1 = eventListeners.length; i < length_1; i += 1) {
                        var l = eventListeners[i];
                        if (l === listener) {
                            eventListeners.splice(i, 1);
                        }
                    }
                }
                else {
                    if (this.listeners[eventName]) {
                        this.listeners[eventName] = null;
                    }
                }
            };
            EventDispatcher.prototype.dispatchEvent = function (eventName, data) {
                if (data === void 0) { data = null; }
                var listeners = this.listeners[eventName];
                if (listeners == null)
                    return;
                for (var i = 0, length = listeners.length; i < length; i += 1) {
                    var listener = listeners[i];
                    if (listener) {
                        listener(this, data);
                    }
                }
            };
            return EventDispatcher;
        }());
        events.EventDispatcher = EventDispatcher;
    })(events = umadash.events || (umadash.events = {}));
})(umadash || (umadash = {}));
var umadash;
(function (umadash) {
    function getVersion() {
        return '0.0.1';
    }
    umadash.getVersion = getVersion;
})(umadash || (umadash = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ldmVudHMvRXZlbnREaXNwYXRjaGVyLnRzIiwiLi4vc3JjL3JlZmVyZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFVLE9BQU8sQ0ErRGhCO0FBL0RELFdBQVUsT0FBTztJQUFDLElBQUEsTUFBTSxDQStEdkI7SUEvRGlCLFdBQUEsTUFBTTtRQUV0QjtZQU9FO2dCQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLENBQUM7WUFRTSwwQ0FBZ0IsR0FBdkIsVUFBd0IsU0FBaUIsRUFBRSxRQUF1QjtnQkFDaEUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDakMsQ0FBQztnQkFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQyxDQUFDO1lBRU0sNkNBQW1CLEdBQTFCLFVBQTJCLFNBQWlCLEVBQUUsUUFBdUI7Z0JBQ25FLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ2IsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDL0MsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQU0sR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxRQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO3dCQUNuRSxJQUFNLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDOzRCQUNuQixjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzt3QkFDOUIsQ0FBQztvQkFDSCxDQUFDO2dCQUNILENBQUM7Z0JBQ0QsSUFBSSxDQUFDLENBQUM7b0JBQ0osRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO29CQUNuQyxDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1lBRU0sdUNBQWEsR0FBcEIsVUFBcUIsU0FBaUIsRUFBRSxJQUFnQjtnQkFBaEIscUJBQUEsRUFBQSxXQUFnQjtnQkFDdEQsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxDQUFDLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQztvQkFBQyxNQUFNLENBQUM7Z0JBRTlCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztvQkFDOUQsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUNiLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3ZCLENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUM7WUFRSCxzQkFBQztRQUFELENBM0RBLEFBMkRDLElBQUE7UUEzRFksc0JBQWUsa0JBMkQzQixDQUFBO0lBRUgsQ0FBQyxFQS9EaUIsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBK0R2QjtBQUFELENBQUMsRUEvRFMsT0FBTyxLQUFQLE9BQU8sUUErRGhCO0FDNURELElBQVUsT0FBTyxDQUloQjtBQUpELFdBQVUsT0FBTztJQUNiO1FBQ0ksTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRmUsa0JBQVUsYUFFekIsQ0FBQTtBQUNMLENBQUMsRUFKUyxPQUFPLEtBQVAsT0FBTyxRQUloQiIsImZpbGUiOiJ1bWFkYXNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsibmFtZXNwYWNlIHVtYWRhc2guZXZlbnRzIHtcbiAgZXhwb3J0IHR5cGUgRXZlbnRMaXN0ZW5lciA9ICh0YXJnZXQ6RXZlbnREaXNwYXRjaGVyLCBkYXRhOiBvYmplY3QpID0+IHZvaWQ7XG4gIGV4cG9ydCBjbGFzcyBFdmVudERpc3BhdGNoZXIge1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vIENPTlNUUlVDVE9SXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgICB9XG5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyBNRVRIT0RcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdID0gW107XG4gICAgICB9XG4gICAgICB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxldCBldmVudExpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV07XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBldmVudExpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGwgPSBldmVudExpc3RlbmVyc1tpXTtcbiAgICAgICAgICBpZiAobCA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRpc3BhdGNoRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IGFueSA9IG51bGwpOiB2b2lkIHtcbiAgICAgIGxldCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdO1xuICAgICAgaWYgKGxpc3RlbmVycyA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lcih0aGlzLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyBNRU1CRVJcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgcHJpdmF0ZSBsaXN0ZW5lcnM6IGFueTtcbiAgfVxuXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImV2ZW50cy9FdmVudERpc3BhdGNoZXIudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImV2ZW50cy9FdmVudERpc3BhdGNoZXIudHNcIiAvPlxuXG5uYW1lc3BhY2UgdW1hZGFzaCB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldFZlcnNpb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICcwLjAuMSc7XG4gICAgfVxufSJdfQ==
